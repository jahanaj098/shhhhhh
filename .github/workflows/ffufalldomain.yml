name: FFUF Scan

on:
  workflow_dispatch:
    inputs:
      domain:
        description: "Domain to scan"
        required: true

jobs:
  subdomain_enumeration:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Tools
      run: |
        sudo apt update
        sudo apt install -y jq curl zip git

        # Install Go
        curl -s https://dl.google.com/go/go1.21.0.linux-amd64.tar.gz | sudo tar -C /usr/local -xzf -
        echo "export PATH=$PATH:/usr/local/go/bin:$(go env GOPATH)/bin" >> ~/.bashrc
        echo "export GOPATH=$(go env GOPATH)" >> ~/.bashrc
        source ~/.bashrc
        
        # Add Go binary path to GitHub Actions environment
        echo "/usr/local/go/bin" >> $GITHUB_PATH
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

        # Install FFUF
        go install github.com/ffuf/ffuf/v2@latest

        # Install Subfinder
        go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest

        # Create results directory
        mkdir -p "$HOME/scan_results"

        # Set hardcoded wordlist path
        wordlist="wordlists/common.txt"
        if [[ ! -f "$wordlist" ]]; then
          echo "Error: Wordlist file not found at $wordlist"
          exit 1
        fi

    - name: Subdomain enumeration and FFUF scan
      run: |
        domain="${{ github.event.inputs.domain }}"
        wordlist="wordlists/common.txt"

        # Create directory for the domain
        domain_folder=$(echo "$domain" | tr '.' '_')
        mkdir -p "$HOME/scan_results/$domain_folder"

        log() {
          echo "[*] $1"
        }

        # Function to handle failed commands
        handle_error() {
          local exit_code=$?
          local command=$1
          if [ $exit_code -ne 0 ]; then
            log "Warning: $command failed with exit code $exit_code"
            # Don't exit, just continue with the next source
          fi
        }

        # Subdomain enumeration
        log "Running Subfinder..."
        subfinder -d "$domain" -silent > "$HOME/scan_results/$domain_folder/subfinder.txt"
        handle_error "Subfinder"

        log "Fetching results from crt.sh..."
        curl -s -m 30 "https://crt.sh/?q=%25.$domain&output=json" | \
          jq -r '.[].name_value' 2>/dev/null | \
          sed 's/\*\.//g' | \
          grep -v "^$" > "$HOME/scan_results/$domain_folder/crtsh.txt" || \
          handle_error "crt.sh"

        # Modified RapidDNS scraping
        log "Fetching subdomains from RapidDNS..."
        output_file="$HOME/scan_results/$domain_folder/rapid.txt"
        touch "$output_file"

        curl -A "Mozilla/5.0" -s "https://rapiddns.io/subdomain/$domain?full=1" | \
          grep -oE "[a-zA-Z0-9._-]+\.$domain" | \
          sort -u > "$output_file" || \
          handle_error "RapidDNS"

        # Combine and deduplicate subdomains
        log "Consolidating subdomains..."
        if [ -d "$HOME/scan_results/$domain_folder" ]; then
          find "$HOME/scan_results/$domain_folder" -type f -name "*.txt" -exec cat {} \; | \
            grep -v "^$" | \
            sort -u > "$HOME/scan_results/$domain_folder/all_subdomains.txt"
        fi

        # Check if we got any subdomains
        if [ ! -s "$HOME/scan_results/$domain_folder/all_subdomains.txt" ]; then
          log "Warning: No subdomains found. Creating fallback entry with main domain."
          echo "$domain" > "$HOME/scan_results/$domain_folder/all_subdomains.txt"
        fi

        # Logging number of discovered subdomains
        subdomain_count=$(wc -l < "$HOME/scan_results/$domain_folder/all_subdomains.txt")
        log "Discovered $subdomain_count unique subdomains"

        # Show first few subdomains as verification
        log "Sample of discovered subdomains:"
        head -n 5 "$HOME/scan_results/$domain_folder/all_subdomains.txt"

        # Consolidated FFUF results
        consolidated_ffuf="$HOME/scan_results/$domain_folder/all_ffuf_results.json"
        touch "$consolidated_ffuf"

        # Run FFUF on discovered subdomains
        log "Running FFUF on discovered subdomains..."
        while IFS= read -r subdomain; do
          log "Scanning $subdomain..."
          ffuf -u "https://$subdomain/FUZZ" \
               -w "$wordlist" \
               -o "$HOME/scan_results/$domain_folder/ffuf_results_$subdomain.json" \
               -json \
               -timeout 3 \
               -rate 50 \
               -recursion \
               -recursion-depth 2 || handle_error "FFUF scan for $subdomain"

          # Append to consolidated results if the scan produced results
          if [ -f "$HOME/scan_results/$domain_folder/ffuf_results_$subdomain.json" ]; then
            cat "$HOME/scan_results/$domain_folder/ffuf_results_$subdomain.json" >> "$consolidated_ffuf"
          fi
        done < "$HOME/scan_results/$domain_folder/all_subdomains.txt"

        log "FFUF scan completed. Consolidated results in $consolidated_ffuf"

    - name: Compress results
      run: |
        cd "$HOME"
        zip -r scan_results.zip scan_results/

    - name: Send results to Telegram
      env:
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        curl -F chat_id="$TELEGRAM_CHAT_ID" \
             -F document=@"$HOME/scan_results.zip" \
             "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument"
