name: Subdomain Enumeration and Fuzzing Workflow

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Enter the domain for enumeration (e.g., hackerone.com)'
        required: true
        type: string

jobs:
  subdomain-enumeration-and-fuzzing:
    runs-on: ubuntu-latest

    env:
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install necessary tools
      - name: Install necessary tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl zip git

          # Install Go
          curl -s https://dl.google.com/go/go1.21.0.linux-amd64.tar.gz | sudo tar -C /usr/local -xzf -
          echo "export PATH=$PATH:/usr/local/go/bin:$(go env GOPATH)/bin" >> ~/.bashrc
          echo "export GOPATH=$(go env GOPATH)" >> ~/.bashrc
          source ~/.bashrc

          # Add Go binary path to GitHub Actions environment
          echo "/usr/local/go/bin" >> $GITHUB_PATH
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

          # Install required Go tools
          go install github.com/ffuf/ffuf/v2@latest
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest

      # Step 3: Run Subdomain Enumeration
      - name: Run Subdomain Enumeration (Subfinder, crt.sh, and RapidDNS)
        run: |
          echo "Running Subfinder..."
          mkdir -p "$GITHUB_WORKSPACE/$domain"
          subfinder -d "$domain" > "$GITHUB_WORKSPACE/$domain/subfinder.txt"

          echo "Fetching results from crt.sh..."
          curl -s "https://crt.sh/?q=%25.$domain&output=json" | jq -r '.[].name_value' | sed 's/\*\.//g' > "$GITHUB_WORKSPACE/$domain/crtsh.txt"

          echo "Fetching subdomains from RapidDNS..."
          subdomains_per_page=100
          output_file="$GITHUB_WORKSPACE/$domain/rapid.txt"
          > "$output_file"

          response=$(curl -s "https://rapiddns.io/subdomain/$domain")
          total_subdomains=$(echo "$response" | grep -oP '(?<=<span style="color: #39cfca; ">)[0-9,]+(?=</span>)' | sed 's/,//g')

          if [[ -n "$total_subdomains" ]]; then
              total_pages=$(( (total_subdomains + subdomains_per_page - 1) / subdomains_per_page ))
              for (( page=1; page<=total_pages; page++ )); do
                  echo "Fetching page $page of $total_pages from RapidDNS..."
                  curl -s "https://rapiddns.io/subdomain/$domain?page=$page" | \
                  grep -oP '(?<=<td>)[^<]+(?=</td>)' | \
                  grep -E '^[a-zA-Z0-9.-]+[.][a-zA-Z]{2,}$' | \
                  sed 's/^[ \t]*//;s/[ \t]*$//' >> "$output_file"
              done
          else
              echo "Could not determine the total number of subdomains from RapidDNS."
          fi

          # Combine all subdomains and remove duplicates
          cat "$GITHUB_WORKSPACE/$domain/subfinder.txt" "$GITHUB_WORKSPACE/$domain/crtsh.txt" "$GITHUB_WORKSPACE/$domain/rapid.txt" | sort -u > "$GITHUB_WORKSPACE/$domain/all_subdomains.txt"

      # Step 4: Sort subdomains by HTTP status codes using httpx
      - name: Sort subdomains by HTTP status codes with httpx
        run: |
          mkdir -p "$GITHUB_WORKSPACE/$domain/status_codes"
          httpx -l "$GITHUB_WORKSPACE/$domain/all_subdomains.txt" -o "$GITHUB_WORKSPACE/$domain/status_codes/output.txt"
          
          # Split into 200 and other status codes
          grep "200" "$GITHUB_WORKSPACE/$domain/status_codes/output.txt" > "$GITHUB_WORKSPACE/$domain/status_codes/200.txt"
          grep -v "200" "$GITHUB_WORKSPACE/$domain/status_codes/output.txt" > "$GITHUB_WORKSPACE/$domain/status_codes/34x.txt"

      # Step 5: Run Directory Fuzzing with ffuf
      - name: Run Directory Fuzzing with ffuf
        run: |
          mkdir -p "$GITHUB_WORKSPACE/$domain/ffuf"
          ffuf -w /usr/share/wordlists/dirb/common.txt -u "http://$domain/FUZZ" -o "$GITHUB_WORKSPACE/$domain/ffuf/ffuf_results.json"

      # Step 6: Send results to Telegram bot
      - name: Send results to Telegram bot
        run: |
          MESSAGE="Subdomain Enumeration and Fuzzing results for $domain"

          # Send the results as a message
          curl -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -d "text=$MESSAGE"

          # Send the result files
          curl -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendDocument" -F "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -F "document=@$GITHUB_WORKSPACE/$domain/ffuf/ffuf_results.json"
          curl -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendDocument" -F "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -F "document=@$GITHUB_WORKSPACE/$domain/status_codes/200.txt"
          curl -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendDocument" -F "chat_id=${{ env.TELEGRAM_CHAT_ID }}" -F "document=@$GITHUB_WORKSPACE/$domain/status_codes/34x.txt"
