name: fuzzit

on:
  workflow_dispatch:
    inputs:
      domain:
        description: Enter the domain for enumeration (e.g., hackerone.com)
        required: true
        type: string

jobs:
  subdomain_enumeration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Install Tools
        run: |
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
          go install -v github.com/ffuf/ffuf@latest

      - name: Run Subdomain Enumeration
        run: |
          domain="${{ github.event.inputs.domain }}"

          # Create directory for storing results
          mkdir -p "$domain"

          # Run Subfinder
          echo "Running Subfinder..."
          subfinder -d "$domain" > "$domain/subfinder.txt"

          # Fetch results from crt.sh
          echo "Fetching results from crt.sh..."
          curl -s "https://crt.sh/?q=%25.$domain&output=json" | jq -r '.[].name_value' | sed 's/\*\.//g' > "$domain/crtsh.txt"

          # RapidDNS enumeration with pagination
          echo "Fetching subdomains from RapidDNS..."
          subdomains_per_page=100
          output_file="$domain/rapid.txt"
          > "$output_file"

          # Fetch the total number of subdomains from the first page
          response=$(curl -s "https://rapiddns.io/subdomain/$domain")
          total_subdomains=$(echo "$response" | grep -oP '(?<=<span style="color: #39cfca; ">)[0-9,]+(?=</span>)' | sed 's/,//g')

          if [[ -n "$total_subdomains" ]]; then
              total_pages=$(( (total_subdomains + subdomains_per_page - 1) / subdomains_per_page ))

              # Fetch all pages
              for (( page=1; page<=total_pages; page++ )); do
                  echo "Fetching page $page of $total_pages from RapidDNS..."
                  curl -s "https://rapiddns.io/subdomain/$domain?page=$page" | \
                  grep -oP '(?<=<td>)[^<]+(?=</td>)' | \
                  grep -E '^[a-zA-Z0-9.-]+[.][a-zA-Z]{2,}$' | \
                  sed 's/^[ \t]*//;s/[ \t]*$//' >> "$output_file"
              done
          else
              echo "Could not determine the total number of subdomains from RapidDNS."
          fi

      - name: Combine All Subdomains into One File
        run: |
          domain="${{ github.event.inputs.domain }}"
          cat "$domain/subfinder.txt" "$domain/crtsh.txt" "$domain/rapid.txt" | sort -u > "$domain/subdomains.txt"

      - name: Send Subdomain List to Telegram Bot
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          domain="${{ github.event.inputs.domain }}"
          subdomains_file="$domain/subdomains.txt"

          if [ -f "$subdomains_file" ] && [ -s "$subdomains_file" ]; then
              curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument" \
                  -F "chat_id=${TELEGRAM_CHAT_ID}" \
                  -F "document=@${subdomains_file}" \
                  -F "caption=Subdomains found for $domain"
          else
              echo "No subdomains found or file does not exist."
          fi

      - name: Check HTTP Status Codes using httpx
        run: |
          domain="${{ github.event.inputs.domain }}"
          cat "$domain/subdomains.txt" | httpx -status-code -o "$domain/urls_with_status.txt"

      - name: Split URLs by Status Code
        run: |
          domain="${{ github.event.inputs.domain }}"
          
          grep '200' "$domain/urls_with_status.txt" | sed 's/\x1b\[[0-9;]*m//g' | sed 's/ \[200\]//g' > "$domain/200.txt"

          grep -E '[0-9]{3}' "$domain/urls_with_status.txt" | sed 's/ \[[0-9]*\]$//' | sed 's/ \[.*\]//' > "$domain/34X.txt"

      - name: Send HTTP Status Files to Telegram Bot
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          domain="${{ github.event.inputs.domain }}"
          httpx_200="$domain/200.txt"
          httpx_34X="$domain/34X.txt"

          if [ -f "$httpx_200" ] && [ -s "$httpx_200" ]; then
              curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument" \
                  -F "chat_id=${TELEGRAM_CHAT_ID}" \
                  -F "document=@${httpx_200}" \
                  -F "caption=HTTP 200 URLs for $domain"
          fi

          if [ -f "$httpx_34X" ] && [ -s "$httpx_34X" ]; then
              curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument" \
                  -F "chat_id=${TELEGRAM_CHAT_ID}" \
                  -F "document=@${httpx_34X}" \
                  -F "caption=HTTP 3XX/4XX/5XX URLs for $domain"
          fi

      - name: Download Wordlist
        run: |
          domain="${{ github.event.inputs.domain }}"
          wget -O "$domain/wordlist.txt" https://raw.githubusercontent.com/jahanaj098/shhhhhh/refs/heads/main/wordlists/common.txt

      - name: Perform Directory Fuzzing with ffuf
        run: |
          domain="${{ github.event.inputs.domain }}"
          wordlist="$domain/wordlist.txt"
          urls_file="$domain/200.txt"
          
          # Create the ffuf folder to store results
          mkdir -p "$domain/ffuf"

          # Loop over each URL in the 200.txt file
          while IFS= read -r url; do
              # Sanitize the URL to create a valid file name
              sanitized_url=$(echo "$url" | sed 's/^https\?:\/\///' | sed 's/\//_/g')
              
              # Run ffuf with the sanitized URL and save results in the ffuf folder
              echo "Running ffuf on $url..."
              ffuf -w "$wordlist" -u "$url/FUZZ" -ac -o "$domain/ffuf/${sanitized_url}_200_ffuf_results.txt"
          done < "$urls_file"

      - name: Perform Directory Fuzzing on 34X URLs
        run: |
          domain="${{ github.event.inputs.domain }}"
          wordlist="$domain/wordlist.txt"
          urls_file="$domain/34X.txt"
          
          # Loop over each URL in the 34X.txt file
          while IFS= read -r url; do
              # Sanitize the URL to create a valid file name
              sanitized_url=$(echo "$url" | sed 's/^https\?:\/\///' | sed 's/\//_/g')
              
              # Run ffuf with the sanitized URL and save results in the ffuf folder
              echo "Running ffuf on $url..."
              ffuf -w "$wordlist" -u "$url/FUZZ" -ac -o "$domain/ffuf/${sanitized_url}_34X_ffuf_results.txt"
          done < "$urls_file"

      - name: Zip and Send ffuf Folder to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          domain="${{ github.event.inputs.domain }}"

          ffuf_folder="$domain/ffuf"

          zip_file="$domain/ffuf_results.zip"

          # Create a zip file containing all the files in the ffuf folder
          zip -r "$zip_file" "$ffuf_folder"

          # Check if the zip file was successfully created
          if [ -f "$zip_file" ]; then
              echo "Zip file created successfully: $zip_file"
              
              # Send the zip file to Telegram
              curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument" \
                  -F "chat_id=${TELEGRAM_CHAT_ID}" \
                  -F "document=@${zip_file}" \
                  -F "caption=All ffuf results for $domain"
          else
              echo "Failed to create zip file."
          fi
