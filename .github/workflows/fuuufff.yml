name: fuzzitt

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain to enumerate'
        required: true
        type: string

jobs:
  subdomain-enum-and-fuzz:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Go
        run: |
          sudo apt update
          sudo apt install -y jq curl zip git
          
          # Install Go
          curl -s https://dl.google.com/go/go1.21.0.linux-amd64.tar.gz | sudo tar -C /usr/local -xzf -
          echo "export PATH=$PATH:/usr/local/go/bin:$(go env GOPATH)/bin" >> ~/.bashrc
          echo "export GOPATH=$(go env GOPATH)" >> ~/.bashrc
          source ~/.bashrc
          
          # Add Go binary path to GitHub Actions environment
          echo "/usr/local/go/bin" >> $GITHUB_PATH
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

          # Install required tools
          go install github.com/ffuf/ffuf/v2@latest
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
          
      - name: Create Directory for Output
        run: |
          mkdir -p "${{ github.event.inputs.domain }}"

      - name: Run Subdomain Enumeration
        run: |
          # Subfinder
          echo "[*] Running Subfinder..."
          subfinder -d "$domain" -silent > "$domain/subfinder.txt"

          # crt.sh
          echo "[*] Fetching results from crt.sh..."
          curl -s "https://crt.sh/?q=%25.$domain&output=json" | jq -r '.[].name_value' | sed 's/\*\.//g' > "$domain/crtsh.txt"

          # RapidDNS with Pagination
          echo "[*] Fetching subdomains from RapidDNS..."
          output_file="$domain/rapid.txt"
          > "$output_file"

          response=$(curl -s "https://rapiddns.io/subdomain/$domain")
          total_subdomains=$(echo "$response" | grep -oP '(?<=<span style="color: #39cfca; ">)[0-9,]+(?=</span>)' | sed 's/,//g')

          if [[ -n "$total_subdomains" ]]; then
              total_pages=$(( (total_subdomains + 99) / 100 ))
              for ((page=1; page<=total_pages; page++)); do
                  echo "Fetching page $page of $total_pages..."
                  curl -s "https://rapiddns.io/subdomain/$domain?page=$page" | \
                  grep -oP '(?<=<td>)[^<]+(?=</td>)' | \
                  grep -E '^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$' >> "$output_file"
              done
          else
              echo "Could not determine total subdomains from RapidDNS."
          fi

      - name: Combine Subdomain Results and Remove Duplicates
        run: |
          cat "$domain/subfinder.txt" "$domain/crtsh.txt" "$domain/rapid.txt" | sort -u > "$domain/subdomains.txt"
      
      - name: Send Subdomains to Telegram
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
            -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -F document=@"$domain/subdomains.txt"

      - name: Get 200 OK Domains using httpx
        run: |
          mkdir -p "$domain/200_ok"
          cat "$domain/subdomains.txt" | httpx -status-code -silent | grep -E "200" | cut -d " " -f1 > "$domain/200.txt"

      - name: Get Other Status Code Domains using httpx
        run: |
          mkdir -p "$domain/other_status_codes"
          cat "$domain/subdomains.txt" | httpx -status-code -silent | grep -vE "200" | cut -d " " -f1 > "$domain/other_status_codes.txt"

      - name: Fuzz with ffuf for 200 OK domains
        run: |
          mkdir -p "$domain/fuzzing_200"
          while read -r domain; do
            echo "[*] Fuzzing $domain..."
            ffuf -u "http://$domain/FUZZ" -w https://github.com/jahanaj098/shhhhhh/blob/main/wordlists/common.txt -ac -mc 200 -max-response-size 10485760 -o "$domain/fuzzing_200/results_$domain.json"
            
            # Check if any valid response received and take a screenshot
            if [ -f "$domain/fuzzing_200/results_$domain.json" ]; then
              puppeteer --headless --screenshot --output="$domain/fuzzing_200/screenshot_$domain.png" "http://$domain/.htaccess"
              curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" -F document=@"$domain/fuzzing_200/screenshot_$domain.png"
            fi
          done < "$domain/200.txt"

      - name: Fuzz with ffuf for Other Status Code domains
        run: |
          mkdir -p "$domain/fuzzing_other"
          while read -r domain; do
            echo "[*] Fuzzing $domain..."
            ffuf -u "http://$domain/FUZZ" -w https://github.com/jahanaj098/shhhhhh/blob/main/wordlists/common.txt -ac -mc 200 -max-response-size 10485760 -o "$domain/fuzzing_other/results_$domain.json"
            
            # Check if any valid response received and take a screenshot
            if [ -f "$domain/fuzzing_other/results_$domain.json" ]; then
              puppeteer --headless --screenshot --output="$domain/fuzzing_other/screenshot_$domain.png" "http://$domain/.htaccess"
              curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" -F document=@"$domain/fuzzing_other/screenshot_$domain.png"
            fi
          done < "$domain/other_status_codes.txt"

      - name: Create Zip of All Files and Send to Telegram
        run: |
          zip -r "$domain/final.zip" "$domain/fuzzing_200" "$domain/fuzzing_other"
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" -F document=@"$domain/final.zip"
